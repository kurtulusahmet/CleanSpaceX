//
//  RocketsInteractorTests.swift
//  CleanSpaceXApp
//
//  Created by Kurtuluş Ahmet TEMEL on 30.04.2020.
//  Copyright (c) 2020 Kurtuluş Ahmet TEMEL. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanSpaceXApp
import XCTest
import CNetwork

class RocketsInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: RocketsInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupRocketsInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupRocketsInteractor() {
        sut = RocketsInteractor()
    }
    
    // MARK: Test doubles
    
    class RocketsPresentationLogicSpy: RocketsPresentationLogic {
        var presentRocketsCalled = false
        func presentRockets(response: Rockets.FetchRockets.Response) {
            presentRocketsCalled = true
        }
    }
    
    class RocketsWorkerSpy: RocketsWorker {
        // MARK: Method call expectations
        var fetchRocketsCalled = false
        
        // MARK: Spied methods
        override func fetchRockets(completion: @escaping ((_ response: [RocketsResponseModel], _ error: CNetworkError?) -> Void)) {
            fetchRocketsCalled = true
            completion([], nil)
        }
    }
    
    // MARK: Tests
    
    func testFetchRocketsShouldAskRocketsWorkerToFetchRocketsAndPresenterToFormatResult() {
        // Given
        let rocketsInteractorOutputSpy = RocketsPresentationLogicSpy()
        sut.presenter = rocketsInteractorOutputSpy
        let rocketsWorkerSpy = RocketsWorkerSpy(rocketStore: RocketsAPI())
        sut.worker = rocketsWorkerSpy
        
        // When
        let request = Rockets.FetchRockets.Request()
        sut.fetchRockets(request: request)
        
        // Then
        XCTAssert(rocketsWorkerSpy.fetchRocketsCalled, "FetchRockets() should ask RocketsWorker to fetch rockets")
        XCTAssert(rocketsInteractorOutputSpy.presentRocketsCalled, "FetchRockets() should ask presenter to format rockets result")
    }
}
